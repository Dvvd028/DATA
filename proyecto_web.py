# -*- coding: utf-8 -*-
"""proyecto web.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DZzKnGwdHIxogKJkg5XtBcguBFRc5-cp

# TALLER 2

**Nombres**
*   Michael Esteban Jiménez Medina
*   David Hernández Sicachá
*   Diego Johan López Fonseca.
"""

import numpy as np
import pandas as pd
!pip install wbgapi #instalando una librería del banco mundial
import wbgapi as wb #importando la librería del banco mundial
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

from scipy import stats

import geopandas as gpd
!pip install rioxarray
import rioxarray
import xarray
import numpy as np
from numpy.random import seed
!pip install osmnx
import osmnx

from matplotlib import colors
from matplotlib.patches import Ellipse
import seaborn as sns
!pip install datashader
import datashader
!pip install contextily
import contextily

from shapely.geometry import Polygon
from shapely import geometry

!pip install pysal
import pysal
from pysal.lib import cg as geometry
from pysal.lib import weights
from pysal.viz import splot
from pysal.explore import esda
from pysal.lib import weights

import mapclassify

from splot.esda import plot_moran
from splot import esda as esdaplot

from sklearn.cluster import DBSCAN

from pointpats import centrography

import libpysal
!pip install pygeos
from pygeos import minimum_rotated_rectangle, from_shapely, to_shapely
from pointpats import (
    distance_statistics,
    QStatistic,
    random,
    PointPattern,
)

"""# SELECCION E IMPORTACIÓN DE VARIABLES"""

wb.search('unemployment,total')

wb.series.metadata.get('SL.UEM.TOTL.ZS')

unemployment = wb.data.DataFrame('SL.UEM.TOTL.ZS',
                                  economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).dropna().reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

unemployment

unemployment = unemployment.unstack().reset_index()

wb.search('GDP per capita current US')

wb.series.metadata.get('NY.GDP.PCAP.CD')

gdp = wb.data.DataFrame('NY.GDP.PCAP.CD',
                                  economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

gdp

gdp = gdp.unstack().reset_index()

wb.search('prevalence of undernourishment')

wb.series.metadata.get('SN.ITK.DEFC.ZS')

undernourishment = wb.data.DataFrame('SN.ITK.DEFC.ZS',
                                   economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).dropna().reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

undernourishment = undernourishment.unstack().reset_index()

wb.search('Life Expectancy at birth,total years')

wb.series.metadata.get('SP.DYN.LE00.IN')

exp = wb.data.DataFrame('SP.DYN.LE00.IN',
                                  economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).dropna().reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

exp

exp = exp.unstack().reset_index()

wb.search('CO2 emissions metric tons per capita')

wb.series.metadata.get('EN.ATM.CO2E.PC')

co2 = wb.data.DataFrame('EN.ATM.CO2E.PC',
                                   economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).dropna().reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

co2

co2 = co2.unstack().reset_index()

"""**Agrupación de variables seleccionadas**"""

DT = gdp.merge(exp, on=['level_0', 'Country'], how='outer', suffixes=('_gdp', '_exp')) \
    .merge(undernourishment, on=['level_0', 'Country'], how='outer', suffixes=('_und', '_exp')) \
    .merge(unemployment, on=['level_0', 'Country'], how='outer', suffixes=('_und', '_unemp')) \
    .merge(co2, on=['level_0', 'Country'], how='outer', suffixes=('_co2', '_und'))

"""**Renombrar columnas**"""

DT.columns = ['Year', 'Country', 'gdp', 'expectancy', 'undernourishment','unemployment','co2']

DT.head(20)

"""**Rellenar datos nulos**"""

DT.info()

DT['Country'] = DT['Country'].astype('category')
DT.info()

"""**Rellenar los datos faltantes**



"""

for country in DT['Country'].unique():
  DT.loc[DT['Country'] == country, 'gdp'] = DT.loc [DT['Country']== country, 'gdp'].interpolate(method ='linear')

DT.info ()

"""# EXPLORACIÓN ESTADISTICA

**Media por país**
"""

mc = DT.groupby('Country').mean()
print (mc)

"""**Media por año**"""

my = DT.groupby('Year').mean()
print (my)

"""**Varianza por país**"""

vc = DT.groupby('Country').var()
print (vc)

"""**Varianza por año**"""

vy = DT.groupby('Year').var()
print (vy)

"""**Desviación estandar por paìs**"""

dc = DT.groupby('Country').std()
print (dc)

"""**Desviación por año**"""

dy = DT.groupby('Year').std()
print (dy)

"""**Correlación**"""

for year in DT ['Year'].unique():
  print(year)
  sns.heatmap(DT[DT['Year']==year].corr())
  plt.show ()

"""# EXPLORACIÓN GRAFICA"""

DT.head(14)

variables = ['gdp', 'undernourishment', 'expectancy', 'co2', 'unemployment']

for variable in variables:
    plt.figure(figsize=(10, 6))
    DT[variable].hist(bins=50, color='skyblue', edgecolor='black')

    plt.xlabel(variable)
    plt.ylabel('Frecuencia')
    plt.title(f'Histograma de {variable}')
    plt.grid(linestyle='-', linewidth=0.5)
    plt.show()

#Determinamos dos variables por continente

south = DT[DT['Country'].isin(['Argentina', 'Uruguay', 'Chile', 'Peru', 'Brazil', 'Ecuador', 'Colombia', 'Paraguay', 'Bolivia', 'Venezuela, RB' ])]
north = DT[DT['Country'].isin(['Canada', 'United States', 'Costa Rica', 'Mexico'])]

#bucle para calcular el promedio anual
for variable in variables:
  LS1 = south.groupby('Year')[[variable]].mean()
  LN1 = north.groupby('Year')[[variable]].mean()

# Creamos el grafico que muestre la relacion de la variable para el grupo de paises

  plt.figure(figsize=(15, 5))

  plt.plot(LS1.index, LS1[variable], label=f'{variable} Sudamérica', color='green', linewidth=2, linestyle='dashed')
  plt.plot(LN1.index, LN1[variable], label=f'{variable} Norte América', color='blue', linewidth=2, linestyle='dashed')

  plt.xlabel('Año')
  plt.ylabel(f'Promedio de {variable}')
  plt.title(f'PROMEDIO ANUAL DE {variable} EN SUR AMERICA Y NORTE AMERICA')
  plt.legend()
  plt.grid(linestyle='-', linewidth=0.5)
  plt.savefig('promedio anual variables.png')
  plt.show()

gdp_und = px.scatter(DT, x="Year", y="undernourishment", size = 'gdp', color="Country", title= 'RELACIÓN POR PAÍS ENTRE EL GPD Y LA DESNUTRICIÓN POR AÑO')
gdp_und.show()

gdp_unem = px.scatter(DT, x="Year", y="unemployment", size = 'gdp' , color="Country", title= 'RELACIÓN POR PAÍS ENTRE EL GPD Y EL DESEMPLEO POR AÑO')
gdp_unem.show()

gdp_co2 = px.scatter(DT, x="Year", y="co2",size = 'gdp',  color="Country", title= 'RELACIÓN POR PAÍS EMTRE EL GPD Y EMISIÓN DE C02 POR AÑO')
gdp_co2.show()

"""# **PRUEBAS DE HIPÓTESIS**

#### Diferencias para cada una de las variables entre **Colombia** y **Suramérica**
"""

variables = ['gdp', 'undernourishment', 'expectancy', 'co2', 'unemployment']

# Definimos la lista de países para Suramérica

south_countries = ['Argentina', 'Uruguay', 'Chile', 'Peru', 'Brazil', 'Ecuador', 'Paraguay', 'Bolivia', 'Venezuela', 'RB']

# Filtramos los datos para obtener las muestras de Colombia y Suramérica

colombia_data = DT[DT['Country'] == 'Colombia']
south_data = DT[DT['Country'].isin(south_countries)]

colombia_data = colombia_data[variables]
south_data = south_data[variables]

from scipy import stats

for variable in variables:

    # Realizamos la prueba de hipótesis (t-test)
    t_statistic, p_value = stats.ttest_ind(colombia_data[variable], south_data[variable])

    print(f"Variable: {variable}")
    print(f"T-statistic: {t_statistic}")
    print(f"P-value: {p_value}")
    if p_value < 0.05:
        print("La diferencia es estadísticamente significativa.\n")
    else:
        print("No hay evidencia suficiente para rechazar la hipótesis nula.\n")

"""#### Diferencias para cada una de las variables entre **Colombia** y **Mexico**"""

mexico_data = DT[DT['Country'] == 'Mexico']

mexico_data = mexico_data[variables]

for variable in variables:

    t_statistic, p_value = stats.ttest_ind(colombia_data[variable], mexico_data[variable])

    print(f"Variable: {variable}")
    print(f"T-statistic: {t_statistic}")
    print(f"P-value: {p_value}")
    if p_value < 0.05:
        print("La diferencia es estadísticamente significativa.\n")
    else:
        print("No hay evidencia suficiente para rechazar la hipótesis nula.\n")

"""#### Diferencias para cada una de las variables entre **Colombia** y **Estados Unidos**"""

usa_data = DT[DT['Country'] == 'United States']

usa_data = usa_data[variables]

for variable in variables:

    t_statistic, p_value = stats.ttest_ind(colombia_data[variable], usa_data[variable])

    print(f"Variable: {variable}")
    print(f"T-statistic: {t_statistic}")
    print(f"P-value: {p_value}")
    if p_value < 0.05:
        print("La diferencia es estadísticamente significativa.\n")
    else:
        print("No hay evidencia suficiente para rechazar la hipótesis nula.\n")

"""#### Diferencias para cada una de las variables entre **Colombia** y **Canada**"""

canada_data = DT[DT['Country'] == 'Canada']

canada_data = canada_data[variables]

for variable in variables:

    t_statistic, p_value = stats.ttest_ind(colombia_data[variable], canada_data[variable])

    print(f"Variable: {variable}")
    print(f"T-statistic: {t_statistic}")
    print(f"P-value: {p_value}")
    if p_value < 0.05:
        print("La diferencia es estadísticamente significativa.\n")
    else:
        print("No hay evidencia suficiente para rechazar la hipótesis nula.\n")

"""#### Diferencias para cada una de las variables entre **Colombia** y **Costa

*   Elemento de lista
*   Elemento de lista

Rica**
"""

cr_data = DT[DT['Country'] == 'Costa Rica']

cr_data = cr_data[variables]

for variable in variables:

    t_statistic, p_value = stats.ttest_ind(colombia_data[variable], cr_data[variable])

    print(f"Variable: {variable}")
    print(f"T-statistic: {t_statistic}")
    print(f"P-value: {p_value}")
    if p_value < 0.05:
        print("La diferencia es estadísticamente significativa.\n")
    else:
        print("No hay evidencia suficiente para rechazar la hipótesis nula.\n")

"""# ENFOQUE GEOREFERENCIADO"""

from google.colab import files
uploaded = files.upload()

"""## Centroides"""

gt_polygons = gpd.read_file('/content/countries_clean.gpkg')

gt_polygons["centroid"] = gt_polygons.geometry.centroid # identificar centroides

gt_polygons.head(140)

# Lista de los 14 países
paises_america = ['Argentina', 'Bolivia', 'Brazil', 'Chile', 'Colombia', 'Ecuador', 'Paraguay', 'Peru', 'Uruguay', 'Venezuela', 'United States of America', 'Canada', 'Mexico', 'Costa Rica']

# Filtra las filasL
america_df = gt_polygons[gt_polygons['ADMIN'].isin(paises_america)]

# Muestra el nuevo DataFrame con solo los 14 países
america_df

# Cargar el GeoDataFrame con los países seleccionados
america_gdf = gpd.GeoDataFrame(america_df)

# Crear una figura y ejes
fig, ax = plt.subplots(figsize=(10, 6))  # Ajusta el tamaño según tus preferencias

# Plotea los países seleccionados
america_gdf.plot(ax=ax, edgecolor='k')

# Configura el aspecto del mapa
ax.set_title('Mapa países de América')
ax.set_xlabel('Longitud')
ax.set_ylabel('Latitud')

# Muestra el mapa
plt.show()

america_gdf["centroid"] = america_gdf.geometry.centroid # identificar centroides 14 paises

america_gdf.head()

gt_polygons["centroid"] = gt_polygons.geometry.centroid

# graficar centroides
ax = america_gdf.set_geometry("centroid").plot("ADMIN", markersize=5)
# graficar polígonos sin color
america_gdf.plot(
    "ADMIN", ax=ax, facecolor="none", edgecolor="k", linewidth=0.2
)

"""##Weights

###Pesos contiguos
"""

# generar puntos en una grilla
l = np.arange(3)
xs, ys = np.meshgrid(l, l)

polys = []
# generar polígonos a partir de los datos
for x, y in zip(xs.flatten(), ys.flatten()):
    poly = Polygon([(x, y), (x + 1, y), (x + 1, y + 1), (x, y + 1)])
    polys.append(poly)
# transformarla en una GeoSeries
polys = gpd.GeoSeries(polys)
gdf = gpd.GeoDataFrame(
    {
        "geometry": polys,
        "id": ["P-%s" % str(i).zfill(2) for i in range(len(polys))],
    }
)

# graficar la tabla
ax = gdf.plot(facecolor="w", edgecolor="k")

for x, y, t in zip(
    [p.centroid.x - 0.25 for p in polys],
    [p.centroid.y - 0.25 for p in polys],
    [i for i in gdf["id"]],
):
    plt.text(
        x,
        y,
        t,
        verticalalignment="center",
        horizontalalignment="center",
    )

ax.set_axis_off()
plt.show()

"""###CHESS"""

# construir una matriz de adyacencia Rook 3x3
wr = weights.contiguity.Rook.from_dataframe(gdf)

f, ax = plt.subplots(1, 1, subplot_kw=dict(aspect="equal"))

gdf.plot(facecolor="w", edgecolor="k", ax=ax)

for x, y, t in zip(
    [p.centroid.x - 0.25 for p in polys],
    [p.centroid.y - 0.25 for p in polys],
    [i for i in gdf["id"]],
):
    plt.text(
        x,
        y,
        t,
        verticalalignment="center",
        horizontalalignment="center",
    )
# conectividad de los pesos
wr.plot(gdf, edge_kws=dict(color="r", linestyle=":"), ax=ax)

ax.set_axis_off()

wr.neighbors

pd.DataFrame(*wr.full()).astype(int)

wr.nonzero

# Esto es similar, solo que ahora se tienen en cuenta los movimientos de la reina
wq = weights.contiguity.Queen.from_dataframe(gdf)
wq.neighbors

f, ax = plt.subplots(1, 1, subplot_kw=dict(aspect="equal"))

gdf.plot(facecolor="w", edgecolor="k", ax=ax)

for x, y, t in zip(
    [p.centroid.x - 0.25 for p in polys],
    [p.centroid.y - 0.25 for p in polys],
    [i for i in gdf["id"]],
):
    plt.text(
        x,
        y,
        t,
        verticalalignment="center",
        horizontalalignment="center",
    )

wq.plot(gdf, edge_kws=dict(color="r", linestyle=":"), ax=ax)

ax.set_axis_off()

wq.weights

wq.cardinalities

wq.histogram

pd.Series(wq.cardinalities).plot.hist(color="k")

wq.s0

wq.pct_nonzero

pd.DataFrame(*wq.full()).astype(int)

w_queen = weights.contiguity.Queen.from_dataframe(america_gdf)

w_queen.plot

"""##Kernel"""

w_kernel = weights.distance.Kernel.from_dataframe(america_gdf)

w_kernel.function

w_kernel.bandwidth[0:5]

sub_30 = america_gdf.query("sub_30 == True")

ax = sub_30.plot(facecolor="w", edgecolor="k")

sub_30.head(30).centroid.plot(color="r", ax=ax)

ax.set_axis_off()

"""# **PAGINA WEB**"""

pip install streamlit -q

pip install streamlit-lottie

pip install Pillow

import streamlit as st
import requests
from streamlit_lottie import st_lottie
from PIL import Image

imagen_gdp = Image.open("/content/gdp.png")
imagen_co2 = Image.open("/content/co2.png")
imagen_exp = Image.open("/content/expe.png")
imagen_unem = Image.open("/content/unem.png")
imagen_undern = Image.open("/content/undern.png")
image_mp4 = Image.open("/content/general.png")
image_mp2 = Image.open("/content/rey.png")
image_mp3 = Image.open("/content/reina.png")
image_mp1 = Image.open("/content/MAPA GENERAL.png")



st.title("Medición del Bienestar en America")

tab1, tab2, tab3, tab4  = st.tabs(["Analisis Grafico - Estadistico", "Analisis de Hipotesis", "Analisis Georreferenciado", "Integrantes"])

with tab1:

    st.subheader("Resumen e Interpretación Grafica - Estadistica")

    st.image(imagen_gdp)
    st.image(imagen_co2)
    st.image(imagen_exp)
    st.image(imagen_unem)
    st.image(imagen_undern)

    st.write("Respecto a indicadores como el GDP per cápita o desnutrición, los niveles de Colombia son bajos en contraposición a los de países de norteamérica y estando en la media respecto a los países de sudamérica ")
    st.write("Colombia es el país de la región que tiene los mayores niveles de desempleo, incluso por encima de países como Argentina, Uruguay o Chile.")
    st.write("En cuanto a los niveles de CO2, la República de Colombia tiene unos buenos números en comparación de países como Estados Unidos, México o Canadá, los cuales alcanzan niveles de CO2 por encima del 4% y que incluso podrían sobrepasar el 17%")
    st.write("En general, los números de Norteamérica respecto a las variables que pueden explicar el bienestar son más alentadores respecto a los de sudamérica, a excepción de los niveles de CO2.")
    st.write("Se puede evidenciar que existe una relación directa entre el GDP per cápita y los niveles de CO2, donde entre más alto la primera variable, también lo será la segunda, como lo explican países como Estados Unidos o Canadá al ser más industrializados")

with tab2:

  st.subheader("Prueba de Hipotesis")

  Formula = r"H_0:  \text{No hay diferencia significativa entre Colombia y suramerica}"
  Formula += r", \\ H_1: \text{Existe una diferencia significativa entre Colombia y suramerica}"
  st.latex(Formula)

  st.write("Respecto a los resultados de las pruebas de hipótesis de Colombia y suramerica, se puede concluir que para las variables GDP, desnutrición y esperanza de vida, no hay diferencias estadísticamente significativas al ser su p-valor mayor a 0.05. En contraposición a las variables de CO2 y desempleo, en donde se evidencian un p-valor muy pequeño, lo que quiere decir que entre Colombia y el resto de la región sí existen diferencias significativas.")


  Formula = r"H_0:  \text{No hay diferencia significativa en las entre Colombia y Mexico}"
  Formula += r", \\ H_1: \text{Existe una diferencia significativa en las entre Colombia y Mexico}"
  st.latex(Formula)

  st.write("En las pruebas entre Colombia y México se ha encontrado que las variables GDP, desnutrición , emisión de CO2 y desempleo muestran diferencias estadísticamente significativas entre los grupos o condiciones evaluados. Esto indica que existen diferencias significativas en el Producto Interno Bruto, la prevalencia de la desnutrición, las emisiones de CO2 y las tasas de desempleo entre los grupos. Por otro lado, no se encontraron diferencias significativas en la esperanza de vida al nacer.")

  Formula = r"H_0:  \text{No hay diferencia significativa entre Colombia y Estados Unidos}"
  Formula += r", \\ H_1: \text{Existe una diferencia significativa entre Colombia y Estados Unidos}"
  st.latex(Formula)

  st.write("Para el análisis entre Colombia y EE.UU y de igual modo, entre Colombia y Canadá, se ha encontrado que todas las variables (GDP, desnutrición, esperanza de vida, emisión de CO2 y desempleo) muestran diferencias estadísticamente significativas entre los grupos o condiciones evaluados. Estos resultados indican que existen diferencias significativas en estas variables entre los grupos.")

  Formula = r"H_0:  \text{No hay diferencia significativa entre Colombia y Costa Rica}"
  Formula += r", \\ H_1: \text{Existe una diferencia significativa entre Colombia y Costa Rica}"
  st.latex(Formula)

  st.write("En cuanto a las pruebas de hipótesis entre Colombia y Costa Rica, se observó que las variables GDP, desnutrición, esperanza de vida y desempleo muestran diferencias estadísticamente significativas entre los grupos o condiciones evaluados. Esto sugiere que existen diferencias significativas en estas variables entre los grupos. Sin embargo, no se encontraron diferencias significativas en las emisiones de CO2 entre los grupos.")

with tab3:

  st.subheader("Mapas Georreferenciados")

  st.image(image_mp1)
  st.image(image_mp2)
  st.image(image_mp3)
  st.image(image_mp4)

with tab4:

  st.title("Integrantes")

  st.subheader("Michael Esteban Jimenez Medina")
  st.subheader("Diego Johan Lopez Fonseca")
  st.subheader("David Hernández Sicachá")